{"version":3,"sources":["../../src/test/tests.js"],"names":[],"mappings":"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","file":"tests.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport sourceMapSupport from 'source-map-support';\nimport chai from 'chai';\nimport rimraf from 'rimraf';\nimport webpack from 'webpack';\nimport WebpackYAMPlugin from '../../';\n\nsourceMapSupport.install({\n  handleUncaughtExceptions: false\n});\n\nchai.config.includeStack = true;\n\nconst assert = chai.assert;\nconst OUTPUT_DIR = path.join(__dirname, 'test_output');\nconst TEST_MANIFEST_FILE = path.join(OUTPUT_DIR, 'test_manifest.json');\n\n// Ensure we have a clean slate before and after each test\nfunction clearFiles() {\n    rimraf.sync(OUTPUT_DIR);\n}\nbeforeEach(clearFiles);\nafterEach(clearFiles);\n\ndescribe('webpack-yam-plugin', () => {\n  it('should emit a manifest with relative paths', (done) => {\n    webpack({\n      context: __dirname,\n      entry: './test_file_1.js',\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'test.js'\n      },\n      plugins: [\n        new WebpackYAMPlugin({\n          manifestPath: TEST_MANIFEST_FILE,\n          outputRoot: path.join(__dirname, '..')\n        })\n      ]\n    }, function() {\n      setTimeout(() => {\n        const manifest = JSON.parse(\n          fs.readFileSync(TEST_MANIFEST_FILE).toString()\n        );\n        assert.deepEqual(manifest, {\n          status: 'built',\n          errors: null,\n          files: {\n            main: [\n              path.join(path.basename(__dirname), path.basename(OUTPUT_DIR), 'test.js')\n            ]\n          }\n        });\n        done();\n      }, 10);\n    });\n  });\n    it('should emit a manifest indicating any errors encountered', (done) => {\n    webpack({\n      context: __dirname,\n      entry: './test_file_2.js',\n      output: {\n        path: OUTPUT_DIR,\n        filename: 'test.js'\n      },\n      plugins: [\n        new WebpackYAMPlugin({\n          manifestPath: TEST_MANIFEST_FILE,\n          outputRoot: path.join(__dirname, '..')\n        })\n      ]\n    }, function() {\n      setTimeout(() => {\n        const manifest = JSON.parse(\n          fs.readFileSync(TEST_MANIFEST_FILE).toString()\n        );\n        assert.equal(manifest.status, 'errors');\n        assert.isArray(manifest.errors);\n        assert.equal(manifest.errors.length, 1);\n        assert.include(manifest.errors[0], 'test_file_3.js');\n        assert.include(manifest.errors[0], './package_that_does_not_exist');\n        assert.isNull(manifest.files);\n        done();\n      }, 10);\n    });\n  });\n    it('should emit a manifest that groups entries', (done) => {\n    webpack({\n      context: __dirname,\n      entry: {\n        foo: './test_file_1.js',\n        bar: './test_file_5.js'\n      },\n      output: {\n        path: OUTPUT_DIR,\n        filename: '[name].js'\n      },\n      plugins: [\n        new WebpackYAMPlugin({\n          manifestPath: TEST_MANIFEST_FILE,\n          outputRoot: path.join(__dirname, '..')\n        })\n      ]\n    }, function() {\n      setTimeout(() => {\n        const manifest = JSON.parse(\n          fs.readFileSync(TEST_MANIFEST_FILE).toString()\n        );\n        assert.deepEqual(manifest, {\n          status: 'built',\n          errors: null,\n          files: {\n            foo: [\n              path.join(path.basename(__dirname), path.basename(OUTPUT_DIR), 'foo.js')\n            ],\n            bar: [\n              path.join(path.basename(__dirname), path.basename(OUTPUT_DIR), 'bar.js')\n            ]\n          }\n        });\n        done();\n      }, 10);\n    });\n  });\n});"]}